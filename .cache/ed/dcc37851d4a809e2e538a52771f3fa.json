{"id":"node_modules/bip39/src/index.js","dependencies":[{"name":"C:\\Users\\varda\\OneDrive\\Desktop\\tezos-web\\package.json","includedInParent":true,"mtime":1632633242012},{"name":"C:\\Users\\varda\\OneDrive\\Desktop\\tezos-web\\node_modules\\bip39\\package.json","includedInParent":true,"mtime":1632638194056},{"name":"create-hash","loc":{"line":3,"column":27},"parent":"C:\\Users\\varda\\OneDrive\\Desktop\\tezos-web\\node_modules\\bip39\\src\\index.js","resolved":"C:\\Users\\varda\\OneDrive\\Desktop\\tezos-web\\node_modules\\create-hash\\browser.js"},{"name":"pbkdf2","loc":{"line":4,"column":25},"parent":"C:\\Users\\varda\\OneDrive\\Desktop\\tezos-web\\node_modules\\bip39\\src\\index.js","resolved":"C:\\Users\\varda\\OneDrive\\Desktop\\tezos-web\\node_modules\\pbkdf2\\browser.js"},{"name":"randombytes","loc":{"line":5,"column":28},"parent":"C:\\Users\\varda\\OneDrive\\Desktop\\tezos-web\\node_modules\\bip39\\src\\index.js","resolved":"C:\\Users\\varda\\OneDrive\\Desktop\\tezos-web\\node_modules\\randombytes\\browser.js"},{"name":"./_wordlists","loc":{"line":158,"column":27},"parent":"C:\\Users\\varda\\OneDrive\\Desktop\\tezos-web\\node_modules\\bip39\\src\\index.js","resolved":"C:\\Users\\varda\\OneDrive\\Desktop\\tezos-web\\node_modules\\bip39\\src\\_wordlists.js"},{"name":"buffer","parent":"C:\\Users\\varda\\OneDrive\\Desktop\\tezos-web\\node_modules\\bip39\\src\\index.js","resolved":"C:\\Users\\varda\\OneDrive\\Desktop\\tezos-web\\node_modules\\node-libs-browser\\node_modules\\buffer\\index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst createHash = require(\"create-hash\");\nconst pbkdf2_1 = require(\"pbkdf2\");\nconst randomBytes = require(\"randombytes\");\nconst _wordlists_1 = require(\"./_wordlists\");\nlet DEFAULT_WORDLIST = _wordlists_1._default;\nconst INVALID_MNEMONIC = 'Invalid mnemonic';\nconst INVALID_ENTROPY = 'Invalid entropy';\nconst INVALID_CHECKSUM = 'Invalid mnemonic checksum';\nconst WORDLIST_REQUIRED = 'A wordlist is required but a default could not be found.\\n' +\n    'Please explicitly pass a 2048 word array explicitly.';\nfunction lpad(str, padString, length) {\n    while (str.length < length)\n        str = padString + str;\n    return str;\n}\nfunction binaryToByte(bin) {\n    return parseInt(bin, 2);\n}\nfunction bytesToBinary(bytes) {\n    return bytes.map(x => lpad(x.toString(2), '0', 8)).join('');\n}\nfunction deriveChecksumBits(entropyBuffer) {\n    const ENT = entropyBuffer.length * 8;\n    const CS = ENT / 32;\n    const hash = createHash('sha256')\n        .update(entropyBuffer)\n        .digest();\n    return bytesToBinary([...hash]).slice(0, CS);\n}\nfunction salt(password) {\n    return 'mnemonic' + (password || '');\n}\nfunction mnemonicToSeedSync(mnemonic, password) {\n    const mnemonicBuffer = Buffer.from((mnemonic || '').normalize('NFKD'), 'utf8');\n    const saltBuffer = Buffer.from(salt((password || '').normalize('NFKD')), 'utf8');\n    return pbkdf2_1.pbkdf2Sync(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\nfunction mnemonicToSeed(mnemonic, password) {\n    return new Promise((resolve, reject) => {\n        try {\n            const mnemonicBuffer = Buffer.from((mnemonic || '').normalize('NFKD'), 'utf8');\n            const saltBuffer = Buffer.from(salt((password || '').normalize('NFKD')), 'utf8');\n            pbkdf2_1.pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512', (err, data) => {\n                if (err)\n                    return reject(err);\n                else\n                    return resolve(data);\n            });\n        }\n        catch (error) {\n            return reject(error);\n        }\n    });\n}\nexports.mnemonicToSeed = mnemonicToSeed;\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    const words = (mnemonic || '').normalize('NFKD').split(' ');\n    if (words.length % 3 !== 0)\n        throw new Error(INVALID_MNEMONIC);\n    // convert word indices to 11 bit binary strings\n    const bits = words\n        .map(word => {\n        const index = wordlist.indexOf(word);\n        if (index === -1)\n            throw new Error(INVALID_MNEMONIC);\n        return lpad(index.toString(2), '0', 11);\n    })\n        .join('');\n    // split the binary string into ENT/CS\n    const dividerIndex = Math.floor(bits.length / 33) * 32;\n    const entropyBits = bits.slice(0, dividerIndex);\n    const checksumBits = bits.slice(dividerIndex);\n    // calculate the checksum and compare\n    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n    if (entropyBytes.length < 16)\n        throw new Error(INVALID_ENTROPY);\n    if (entropyBytes.length > 32)\n        throw new Error(INVALID_ENTROPY);\n    if (entropyBytes.length % 4 !== 0)\n        throw new Error(INVALID_ENTROPY);\n    const entropy = Buffer.from(entropyBytes);\n    const newChecksum = deriveChecksumBits(entropy);\n    if (newChecksum !== checksumBits)\n        throw new Error(INVALID_CHECKSUM);\n    return entropy.toString('hex');\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nfunction entropyToMnemonic(entropy, wordlist) {\n    if (!Buffer.isBuffer(entropy))\n        entropy = Buffer.from(entropy, 'hex');\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    // 128 <= ENT <= 256\n    if (entropy.length < 16)\n        throw new TypeError(INVALID_ENTROPY);\n    if (entropy.length > 32)\n        throw new TypeError(INVALID_ENTROPY);\n    if (entropy.length % 4 !== 0)\n        throw new TypeError(INVALID_ENTROPY);\n    const entropyBits = bytesToBinary([...entropy]);\n    const checksumBits = deriveChecksumBits(entropy);\n    const bits = entropyBits + checksumBits;\n    const chunks = bits.match(/(.{1,11})/g);\n    const words = chunks.map(binary => {\n        const index = binaryToByte(binary);\n        return wordlist[index];\n    });\n    return wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093' // Japanese wordlist\n        ? words.join('\\u3000')\n        : words.join(' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\nfunction generateMnemonic(strength, rng, wordlist) {\n    strength = strength || 128;\n    if (strength % 32 !== 0)\n        throw new TypeError(INVALID_ENTROPY);\n    rng = rng || randomBytes;\n    return entropyToMnemonic(rng(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.validateMnemonic = validateMnemonic;\nfunction setDefaultWordlist(language) {\n    const result = _wordlists_1.wordlists[language];\n    if (result)\n        DEFAULT_WORDLIST = result;\n    else\n        throw new Error('Could not find wordlist for language \"' + language + '\"');\n}\nexports.setDefaultWordlist = setDefaultWordlist;\nfunction getDefaultWordlist() {\n    if (!DEFAULT_WORDLIST)\n        throw new Error('No Default Wordlist set');\n    return Object.keys(_wordlists_1.wordlists).filter(lang => {\n        if (lang === 'JA' || lang === 'EN')\n            return false;\n        return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);\n    })[0];\n}\nexports.getDefaultWordlist = getDefaultWordlist;\nvar _wordlists_2 = require(\"./_wordlists\");\nexports.wordlists = _wordlists_2.wordlists;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/bip39/src/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/bip39/src/index.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}}],"sources":{"node_modules/bip39/src/index.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst createHash = require(\"create-hash\");\nconst pbkdf2_1 = require(\"pbkdf2\");\nconst randomBytes = require(\"randombytes\");\nconst _wordlists_1 = require(\"./_wordlists\");\nlet DEFAULT_WORDLIST = _wordlists_1._default;\nconst INVALID_MNEMONIC = 'Invalid mnemonic';\nconst INVALID_ENTROPY = 'Invalid entropy';\nconst INVALID_CHECKSUM = 'Invalid mnemonic checksum';\nconst WORDLIST_REQUIRED = 'A wordlist is required but a default could not be found.\\n' +\n    'Please explicitly pass a 2048 word array explicitly.';\nfunction lpad(str, padString, length) {\n    while (str.length < length)\n        str = padString + str;\n    return str;\n}\nfunction binaryToByte(bin) {\n    return parseInt(bin, 2);\n}\nfunction bytesToBinary(bytes) {\n    return bytes.map(x => lpad(x.toString(2), '0', 8)).join('');\n}\nfunction deriveChecksumBits(entropyBuffer) {\n    const ENT = entropyBuffer.length * 8;\n    const CS = ENT / 32;\n    const hash = createHash('sha256')\n        .update(entropyBuffer)\n        .digest();\n    return bytesToBinary([...hash]).slice(0, CS);\n}\nfunction salt(password) {\n    return 'mnemonic' + (password || '');\n}\nfunction mnemonicToSeedSync(mnemonic, password) {\n    const mnemonicBuffer = Buffer.from((mnemonic || '').normalize('NFKD'), 'utf8');\n    const saltBuffer = Buffer.from(salt((password || '').normalize('NFKD')), 'utf8');\n    return pbkdf2_1.pbkdf2Sync(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\nfunction mnemonicToSeed(mnemonic, password) {\n    return new Promise((resolve, reject) => {\n        try {\n            const mnemonicBuffer = Buffer.from((mnemonic || '').normalize('NFKD'), 'utf8');\n            const saltBuffer = Buffer.from(salt((password || '').normalize('NFKD')), 'utf8');\n            pbkdf2_1.pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512', (err, data) => {\n                if (err)\n                    return reject(err);\n                else\n                    return resolve(data);\n            });\n        }\n        catch (error) {\n            return reject(error);\n        }\n    });\n}\nexports.mnemonicToSeed = mnemonicToSeed;\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    const words = (mnemonic || '').normalize('NFKD').split(' ');\n    if (words.length % 3 !== 0)\n        throw new Error(INVALID_MNEMONIC);\n    // convert word indices to 11 bit binary strings\n    const bits = words\n        .map(word => {\n        const index = wordlist.indexOf(word);\n        if (index === -1)\n            throw new Error(INVALID_MNEMONIC);\n        return lpad(index.toString(2), '0', 11);\n    })\n        .join('');\n    // split the binary string into ENT/CS\n    const dividerIndex = Math.floor(bits.length / 33) * 32;\n    const entropyBits = bits.slice(0, dividerIndex);\n    const checksumBits = bits.slice(dividerIndex);\n    // calculate the checksum and compare\n    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n    if (entropyBytes.length < 16)\n        throw new Error(INVALID_ENTROPY);\n    if (entropyBytes.length > 32)\n        throw new Error(INVALID_ENTROPY);\n    if (entropyBytes.length % 4 !== 0)\n        throw new Error(INVALID_ENTROPY);\n    const entropy = Buffer.from(entropyBytes);\n    const newChecksum = deriveChecksumBits(entropy);\n    if (newChecksum !== checksumBits)\n        throw new Error(INVALID_CHECKSUM);\n    return entropy.toString('hex');\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nfunction entropyToMnemonic(entropy, wordlist) {\n    if (!Buffer.isBuffer(entropy))\n        entropy = Buffer.from(entropy, 'hex');\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    // 128 <= ENT <= 256\n    if (entropy.length < 16)\n        throw new TypeError(INVALID_ENTROPY);\n    if (entropy.length > 32)\n        throw new TypeError(INVALID_ENTROPY);\n    if (entropy.length % 4 !== 0)\n        throw new TypeError(INVALID_ENTROPY);\n    const entropyBits = bytesToBinary([...entropy]);\n    const checksumBits = deriveChecksumBits(entropy);\n    const bits = entropyBits + checksumBits;\n    const chunks = bits.match(/(.{1,11})/g);\n    const words = chunks.map(binary => {\n        const index = binaryToByte(binary);\n        return wordlist[index];\n    });\n    return wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093' // Japanese wordlist\n        ? words.join('\\u3000')\n        : words.join(' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\nfunction generateMnemonic(strength, rng, wordlist) {\n    strength = strength || 128;\n    if (strength % 32 !== 0)\n        throw new TypeError(INVALID_ENTROPY);\n    rng = rng || randomBytes;\n    return entropyToMnemonic(rng(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.validateMnemonic = validateMnemonic;\nfunction setDefaultWordlist(language) {\n    const result = _wordlists_1.wordlists[language];\n    if (result)\n        DEFAULT_WORDLIST = result;\n    else\n        throw new Error('Could not find wordlist for language \"' + language + '\"');\n}\nexports.setDefaultWordlist = setDefaultWordlist;\nfunction getDefaultWordlist() {\n    if (!DEFAULT_WORDLIST)\n        throw new Error('No Default Wordlist set');\n    return Object.keys(_wordlists_1.wordlists).filter(lang => {\n        if (lang === 'JA' || lang === 'EN')\n            return false;\n        return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);\n    })[0];\n}\nexports.getDefaultWordlist = getDefaultWordlist;\nvar _wordlists_2 = require(\"./_wordlists\");\nexports.wordlists = _wordlists_2.wordlists;\n"},"lineCount":161}},"error":null,"hash":"234eb04dfb66c214593b53bb1d1e6259","cacheData":{"env":{}}}